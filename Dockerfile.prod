# Stage 1: Build Stage
FROM python:3.11-alpine AS builder

WORKDIR /app

# copy the files over 
COPY . .

# Copy and install Python dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Collect static files
RUN python manage.py collectstatic --noinput

# Stage 2: Production Stage
FROM python:3.11-alpine

# Install Nginx
RUN apk update && apk add --no-cache nginx

# Remove default Nginx configuration
RUN rm /etc/nginx/http.d/default.conf

# Copy Nginx configuration
COPY nginx.conf /etc/nginx/http.d

# Copy static files from the build stage
COPY --from=builder /app/static /usr/share/nginx/html

# Set working directory to /app in the second stage
WORKDIR /app

# copy the relevant files
COPY --from=builder /app/manage.py /app/manage.py
COPY --from=builder /app/babyshop /app/babyshop
COPY --from=builder /app/templates /app/templates
COPY --from=builder /app/static /app/static
COPY --from=builder /app/users /app/users
COPY --from=builder /app/products /app/products

# Copy the requirements and install them again
COPY --from=builder /app/requirements.txt /app/requirements.txt
RUN pip install -r /app/requirements.txt

# initialize the database
RUN python manage.py migrate

# Expose port 80 for Nginx
EXPOSE 8080

# Start Nginx and run the Django application
CMD nginx && python manage.py runserver 0.0.0.0:8000